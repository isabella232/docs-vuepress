(window.webpackJsonp=window.webpackJsonp||[]).push([[238],{629:function(e,t,a){"use strict";a.r(t);var o=a(0),n=Object(o.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"node-filters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-filters","aria-hidden":"true"}},[e._v("#")]),e._v(" Node Filters")]),e._v(" "),a("h2",{attrs:{id:"node-filter-syntax"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-filter-syntax","aria-hidden":"true"}},[e._v("#")]),e._v(" Node Filter Syntax")]),e._v(" "),a("p",[e._v("The basic format is a sequence of "),a("code",[e._v("attributename: value")]),e._v(" pairs to select nodes which match. You can negate a match by using "),a("code",[e._v("!attributename: value")]),e._v(". If you do not specify an attribute name, then the "),a("code",[e._v("nodename")]),e._v(" is matched against the bare value.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("value")]),e._v(" can be:")]),e._v(" "),a("ul",[a("li",[e._v("a "),a("a",{attrs:{href:"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("regular-expression"),a("OutboundLink")],1),e._v(" results in all nodes matching the regular expression for the attribute. - e.g. "),a("code",[e._v("www.*")])]),e._v(" "),a("li",[e._v("a comma-separated list of values, in which case each item is treated as an "),a("em",[e._v("exact match")]),e._v(", results in all nodes matching any of the exact values for the attribute. - e.g.: "),a("code",[e._v("web1,web2")])]),e._v(" "),a("li",[e._v("for the special "),a("code",[e._v("tags")]),e._v(" attribute, a set of values, results in all nodes with a set of tags that match.\n"),a("ul",[a("li",[e._v("a comma-separated list of values to OR together")]),e._v(" "),a("li",[e._v("a "),a("code",[e._v("+")]),e._v("-separated list of values to AND together")]),e._v(" "),a("li",[e._v("e.g. "),a("code",[e._v("a+b")]),e._v(" (match node with both tags "),a("code",[e._v("a")]),e._v(" and "),a("code",[e._v("b")]),e._v(")")]),e._v(" "),a("li",[e._v("e.g. "),a("code",[e._v("a+b,x")]),e._v(" (match node with both tags "),a("code",[e._v("a")]),e._v(" and "),a("code",[e._v("b")]),e._v(", or tag "),a("code",[e._v("x")]),e._v(")")])])])]),e._v(" "),a("p",[e._v("The result is all nodes which match all of the clauses.")]),e._v(" "),a("p",[e._v("You can include multiple attribute name/value pairs with the same attribute name,\nin which case it effectively concatenates all of the values into a comma-separated list,\nwhich will not use regular-expression matching for any of those values.")]),e._v(" "),a("pre",[a("code",[e._v("name: web1 name: web2\n")])]),e._v(" "),a("p",[e._v("Is the same as:")]),e._v(" "),a("pre",[a("code",[e._v("name: web1,web2\n")])]),e._v(" "),a("p",[e._v("This "),a("em",[e._v("does not")]),e._v(" use regular-expression matching. If you want to combine multiple regular expressions,\nrefer to the "),a("a",{attrs:{href:"https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("regular-expression"),a("OutboundLink")],1),e._v(" syntax. For example, you could use "),a("code",[e._v("anode.*|bnode.*")]),e._v(' to match all\nnodes starting with "anode" or "bnode".')]),e._v(" "),a("p",[a("em",[e._v("Examples:")])]),e._v(" "),a("p",[e._v("Match a set of nodes by name, includes all the node names listed:")]),e._v(" "),a("pre",[a("code",[e._v("mynode1 mynode2\n")])]),e._v(" "),a("p",[e._v("Include mynode and exclude mynode2:")]),e._v(" "),a("pre",[a("code",[e._v("mynode1 !nodename: mynode2\n")])]),e._v(" "),a("p",[e._v("Include nodes with both of the tags "),a("code",[e._v("www")]),e._v(" and "),a("code",[e._v("prod")]),e._v(" or either of the given hostnames:")]),e._v(" "),a("pre",[a("code",[e._v("tags: www+prod hostname: dev1.example.com,dev2.example.com\n")])])])},[],!1,null,null,null);t.default=n.exports}}]);