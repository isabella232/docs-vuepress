(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{480:function(e,t,o){"use strict";o.r(t);var r=o(0),a=Object(r.a)({},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h1",{attrs:{id:"git-plugin"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git-plugin","aria-hidden":"true"}},[e._v("#")]),e._v(" Git Plugin")]),e._v(" "),o("p",[e._v("Rundeck provides SCM Export and SCM Import providers for Git.")]),e._v(" "),o("p",[e._v("This plugin allows Source Code Management of the jobs, versioning, exporting or importing their definitions using a remote Git repository.")]),e._v(" "),o("h2",{attrs:{id:"configuring-git-export"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#configuring-git-export","aria-hidden":"true"}},[e._v("#")]),e._v(" Configuring Git Export")]),e._v(" "),o("h3",{attrs:{id:"commiter-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#commiter-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Commiter Configuration")]),e._v(" "),o("p",[o("strong",[e._v("Committer Name")]),e._v(" and "),o("strong",[e._v("Committer Email")]),e._v(" are mandatory fields, the recommended configuration is to use the default "),o("code",[e._v("${user.fullName}")]),e._v(" and "),o("code",[e._v("${user.email}")]),e._v(". The email and name of the current user can be set on the Profile page.")]),e._v(" "),o("h3",{attrs:{id:"git-repository-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git-repository-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Git Repository Configuration")]),e._v(" "),o("p",[o("strong",[e._v("The Base Directory")]),e._v(" is a local folder on the server node used to clone the git repository.")]),e._v(" "),o("p",[o("strong",[e._v("Git url")]),e._v(" and "),o("strong",[e._v("Branch")]),e._v(" are the common repository settings.")]),e._v(" "),o("p",[o("strong",[e._v("Fetch automatically")]),e._v(" automatize the fetch command to be called in background.")]),e._v(" "),o("h3",{attrs:{id:"job-source-files-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#job-source-files-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Job Source Files Configuration")]),e._v(" "),o("p",[o("strong",[e._v("Export UUID Behavior")]),e._v(" can be one of these values: "),o("code",[e._v("preserve")]),e._v(", "),o("code",[e._v("original")]),e._v(" or "),o("code",[e._v("remove")]),e._v(".")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("preserve")]),e._v(" - Write the Job UUID into exported Jobs, and as "),o("code",[e._v("${job.id}")]),e._v(" in the "),o("strong",[e._v("File Path Template")])]),e._v(" "),o("li",[o("code",[e._v("original")]),e._v(" - Write the imported Source UUID into exported Jobs, and use it as the "),o("code",[e._v("${job.sourceId}")]),e._v(" in the "),o("strong",[e._v("File Path Template")]),e._v(". This value is different from the job UUID.")]),e._v(" "),o("li",[o("code",[e._v("remove")]),e._v(" - Do not write a UUID into the exported Jobs.")])]),e._v(" "),o("p",[e._v("Changing this value modifies the file definition and files need to be pushed again to the repository.")]),e._v(" "),o("p",[o("strong",[e._v("File Path Template")]),e._v(" is the path template for storing a Job to a file within the base dir. It works using these patterns:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("${job.name}")]),e._v(" - the job name")]),e._v(" "),o("li",[o("code",[e._v("${job.group}")]),e._v(" - blank, or path/")]),e._v(" "),o("li",[o("code",[e._v("${job.project}")]),e._v(" - project name")]),e._v(" "),o("li",[o("code",[e._v("${job.id}")]),e._v(" - job UUID")]),e._v(" "),o("li",[o("code",[e._v("${job.sourceId}")]),e._v(" - Original Job UUID, this is a random UUID different from "),o("code",[e._v("${job.id}")]),e._v(" (See above "),o("code",[e._v("original")]),e._v(" UUID Behavior)")]),e._v(" "),o("li",[o("code",[e._v("${config.format}")]),e._v(" - Serialization format "),o("code",[e._v("xml")]),e._v(" or "),o("code",[e._v("yaml")]),e._v(".")])]),e._v(" "),o("p",[o("strong",[e._v("Format")]),e._v(" store files using "),o("code",[e._v("xml")]),e._v(" or "),o("code",[e._v("yaml")]),e._v(" format.")]),e._v(" "),o("h3",{attrs:{id:"authentication-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#authentication-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Authentication Configuration")]),e._v(" "),o("p",[o("strong",[e._v("SSH: Strict Host Key Checking")]),e._v(": If yes, require remote host SSH key is defined in the "),o("code",[e._v("~/.ssh/known_hosts")]),e._v(" file, otherwise do not verify.")]),e._v(" "),o("p",[o("strong",[e._v("SSH Key Storage Path")]),e._v(" (Optional): A Storage Key path containing the private key to be used with git authentication.")]),e._v(" "),o("p",[o("strong",[e._v("Password Storage Path")]),e._v(" (Optional): A password stored in the Key Storage to be used on the ssh or https git authentication.")]),e._v(" "),o("h2",{attrs:{id:"git-import-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git-import-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Git Import Configuration")]),e._v(" "),o("h3",{attrs:{id:"git-repository-configuration-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#git-repository-configuration-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Git Repository Configuration")]),e._v(" "),o("p",[o("strong",[e._v("The Base Directory")]),e._v(" is a local folder on the server node used to clone the git repository.")]),e._v(" "),o("p",[o("strong",[e._v("Git url")]),e._v(" and "),o("strong",[e._v("Branch")]),e._v(" are the common repository settings.")]),e._v(" "),o("p",[o("strong",[e._v("Fetch automatically")]),e._v(" automatize the fetch command to be called in background.")]),e._v(" "),o("p",[o("strong",[e._v("Pull automatically")]),e._v(" automatically pull remote changes on automatic fetch. If false, you can always perform it manually.")]),e._v(" "),o("h3",{attrs:{id:"job-source-files-configuration-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#job-source-files-configuration-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Job Source Files Configuration")]),e._v(" "),o("p",[o("strong",[e._v("Import UUID Behavior")]),e._v(" how to handle UUIDs from imported Job source files")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("preserve")]),e._v(" - Preserve the Source UUID as the Job UUID")]),e._v(" "),o("li",[o("code",[e._v("archive")]),e._v(" - Remove the Source UUID but keep it for use in Export. Allows you to use "),o("code",[e._v("${job.sourceId}")]),e._v(" in the "),o("strong",[e._v("File Path Template")]),e._v(" instead of "),o("code",[e._v("${job.id}")]),e._v(".")]),e._v(" "),o("li",[o("code",[e._v("remove")]),e._v(" - Remove the source UUID.")])]),e._v(" "),o("p",[o("strong",[e._v("File Path Template")]),e._v(" is the path template for storing a Job to a file within the base dir. It works using these patterns:")]),e._v(" "),o("ul",[o("li",[o("code",[e._v("${job.name}")]),e._v(" - the job name")]),e._v(" "),o("li",[o("code",[e._v("${job.group}")]),e._v(" - blank, or path/")]),e._v(" "),o("li",[o("code",[e._v("${job.project}")]),e._v(" - project name")]),e._v(" "),o("li",[o("code",[e._v("${job.id}")]),e._v(" - job UUID")]),e._v(" "),o("li",[o("code",[e._v("${job.sourceId}")]),e._v(" - Original Job UUID, this is a random UUID different from "),o("code",[e._v("${job.id}")]),e._v(" (See above "),o("code",[e._v("archive")]),e._v(" UUID Behavior)")]),e._v(" "),o("li",[o("code",[e._v("${config.format}")]),e._v(" - Serialization format "),o("code",[e._v("xml")]),e._v(" or "),o("code",[e._v("yaml")]),e._v(".")])]),e._v(" "),o("h3",{attrs:{id:"authentication-configuration-2"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#authentication-configuration-2","aria-hidden":"true"}},[e._v("#")]),e._v(" Authentication Configuration")]),e._v(" "),o("p",[o("strong",[e._v("SSH: Strict Host Key Checking")]),e._v(": If yes, require remote host SSH key is defined in the "),o("code",[e._v("~/.ssh/known_hosts")]),e._v(" file, otherwise do not verify.")]),e._v(" "),o("p",[o("strong",[e._v("SSH Key Storage Path")]),e._v(" (Optional): A Storage Key path containing the private key to be used with git authentication.")]),e._v(" "),o("p",[o("strong",[e._v("Password Storage Path")]),e._v(" (Optional): A password stored in the Key Storage to be used on the ssh or https git authentication.")]),e._v(" "),o("h3",{attrs:{id:"setup-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#setup-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Setup Configuration")]),e._v(" "),o("p",[e._v("You can set "),o("strong",[e._v("Match a Regular Expression?")]),e._v(" to "),o("code",[e._v("yes")]),e._v(" to enter a regular expression that is going to be checked to match all paths that match the regular expression to be imported.\nIf you set it to "),o("code",[e._v("no")]),e._v(" on the next step you are going to be asked to select one by one the files to be imported.")]),e._v(" "),o("h2",{attrs:{id:"advanced-configurations"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#advanced-configurations","aria-hidden":"true"}},[e._v("#")]),e._v(" Advanced configurations")]),e._v(" "),o("h3",{attrs:{id:"use-the-same-repo-for-multiple-projects"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#use-the-same-repo-for-multiple-projects","aria-hidden":"true"}},[e._v("#")]),e._v(" Use the same repo for multiple projects.")]),e._v(" "),o("p",[e._v("There is more than one way to use a single repository for multiple projects.")]),e._v(" "),o("p",[e._v("You can use different branches of the same repository for each project or you can use the same branch but using folders in the repository.")]),e._v(" "),o("p",[e._v("This is an example of use folders inside the same repository and branch.")]),e._v(" "),o("h3",{attrs:{id:"export-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#export-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Export Configuration")]),e._v(" "),o("p",[e._v("On the first project, called "),o("em",[e._v("project-a")]),e._v(" in this example:\nSet "),o("strong",[e._v("Export UUID Behavior")]),e._v(" to "),o("code",[e._v("original")]),e._v(".\nSet "),o("strong",[e._v("File Path Template")]),e._v(" to "),o("code",[e._v("project-a/${job.group}${job.name}-${job.sourceId}.${config.format}")]),e._v(".")]),e._v(" "),o("p",[e._v("In another project, called "),o("em",[e._v("project-b")]),e._v(" on this example, use the same configuration, just change the "),o("strong",[e._v("File Path Template")]),e._v(" to "),o("code",[e._v("project-b/${job.group}${job.name}-${job.sourceId}.${config.format}")]),e._v(".")]),e._v(" "),o("h3",{attrs:{id:"import-configuration"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#import-configuration","aria-hidden":"true"}},[e._v("#")]),e._v(" Import Configuration")]),e._v(" "),o("p",[e._v("On the first project, to import jobs from "),o("em",[e._v("project-a")]),e._v(" in the last example:\nSet "),o("strong",[e._v("Import UUID Behavior")]),e._v(" to "),o("code",[e._v("archive")]),e._v(".\nSet "),o("strong",[e._v("File Path Template")]),e._v(" to "),o("code",[e._v("project-a/${job.group}${job.name}-${job.sourceId}.${config.format}")]),e._v(".\nSet "),o("strong",[e._v("Match a Regular Expression?")]),e._v(" to "),o("code",[e._v("yes")]),e._v(" and "),o("strong",[e._v("Regular Expression")]),e._v(" to "),o("code",[e._v("project-a/.*\\.xml")]),e._v(" or "),o("code",[e._v("project-a/.*\\.yaml")]),e._v(".")]),e._v(" "),o("p",[e._v("On the other project, to import "),o("em",[e._v("project-b")]),e._v(":\nSet "),o("strong",[e._v("Import UUID Behavior")]),e._v(" to "),o("code",[e._v("archive")]),e._v(".\nSet "),o("strong",[e._v("File Path Template")]),e._v(" to "),o("code",[e._v("project-b/${job.group}${job.name}-${job.sourceId}.${config.format}")]),e._v(".\nSet "),o("strong",[e._v("Match a Regular Expression?")]),e._v(" to "),o("code",[e._v("yes")]),e._v(" and "),o("strong",[e._v("Regular Expression")]),e._v(" to "),o("code",[e._v("project-b/.*\\.xml")]),e._v(" or "),o("code",[e._v("project-b/.*\\.yaml")]),e._v(".")])])},[],!1,null,null,null);t.default=a.exports}}]);