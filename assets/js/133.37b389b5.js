(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{622:function(t,a,e){"use strict";e.r(a);var n=e(0),s=Object(n.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"content-converter-plugins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#content-converter-plugins","aria-hidden":"true"}},[t._v("#")]),t._v(" Content Converter Plugins")]),t._v(" "),e("h2",{attrs:{id:"about"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#about","aria-hidden":"true"}},[t._v("#")]),t._v(" About")]),t._v(" "),e("p",[t._v("Content Converter Plugins can convert log data into HTML or other data formats, to enable richer logs to be presented in the Rundeck GUI when viewing the Execution Output Logs.")]),t._v(" "),e("p",[t._v("In addition, Content Converters can be chained together in a limited way, allowing one plugin to do the work\nof (say) converting a List of Java Strings into an HTML "),e("code",[t._v("<ol>")]),t._v(", while another plugin does the work of converting CSV formatted data\ninto a List of Strings. You could add another plugin which can convert log data into a List of Strings, and it would\nalso be rendered into a "),e("code",[t._v("<ol>")]),t._v(" in the final output due to the first plugin.")]),t._v(" "),e("p",[t._v('Each Content Converter Plugin can be asked for "Data Types" that it can accept, and also describes the Output "Data Types" that it can produce.')]),t._v(" "),e("p",[t._v('A "Data Type" consist of a Java type (class), and a String such as '),e("code",[t._v("text/html")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"behavior"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#behavior","aria-hidden":"true"}},[t._v("#")]),t._v(" Behavior")]),t._v(" "),e("p",[t._v("Content Converter plugins are applied automatically to Log Output when viewing it in the Rundeck GUI.")]),t._v(" "),e("p",[t._v("However, the Log output must have certain metadata entries set for the Log Events. Plain log output will not be\nrendered in any special way (aside from ANSI Color rendering.)")]),t._v(" "),e("p",[t._v("For this reason, usually a "),e("router-link",{attrs:{to:"/developer/log-filter-plugins.html"}},[t._v("Log Filter Plugin")]),t._v(" is used to annotate the log output with the correct data type when\nused with Rundeck's Command or Script steps,\nhowever custom Step plugins can add this metadata in the logs they emit.")],1),t._v(" "),e("h2",{attrs:{id:"log-metadata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#log-metadata","aria-hidden":"true"}},[t._v("#")]),t._v(" Log Metadata")]),t._v(" "),e("p",[t._v("Log events have Metadata (key/value strings) associated with them.")]),t._v(" "),e("p",[t._v("If a Log event has a "),e("code",[t._v("content-data-type")]),t._v(" metadata value, Rundeck will attempt to chain together up to two Content Converter Plugins\nto convert the specified data type into "),e("code",[t._v("text/html")]),t._v(" for rendering in the GUI.")]),t._v(" "),e("p",[t._v('Using a Log Filter plugin such as the "Render Formatted Data" built-in Log Filter Plugin allows adding adding the '),e("code",[t._v("content-data-type")]),t._v(" to the output\nof Commands or Script steps.")]),t._v(" "),e("p",[t._v("Additional metadata can be passed to the Content Converter plugins. All log metadata entries with keys starting with "),e("code",[t._v("content-meta:")]),t._v(" will be extracted from the\nLog Event metadata, and the "),e("code",[t._v("content-meta:")]),t._v(" prefix removed.")]),t._v(" "),e("h2",{attrs:{id:"java-plugin-type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#java-plugin-type","aria-hidden":"true"}},[t._v("#")]),t._v(" Java Plugin Type")]),t._v(" "),e("p",[t._v("Plugins must implement the "),e("a",{attrs:{href:"https://static.javadoc.io/org.rundeck/rundeck-core/3.1.0-20190731/com/dtolabs/rundeck/plugins/logs/ContentConverterPlugin.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ContentConverterPlugin"),e("OutboundLink")],1),t._v(" interface, and declare as a provider of server "),e("code",[t._v("ContentConverter")]),t._v(".")]),t._v(" "),e("p",[t._v("Methods:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("boolean isSupportsDataType(Class<?> clazz, String dataType)")]),t._v(": called to detect if the plugin supports the input Data Type.")]),t._v(" "),e("li",[e("code",[t._v("Class<?> getOutputClassForDataType(Class<?> clazz, String dataType)")]),t._v(": gets the Java Class for the input data type")]),t._v(" "),e("li",[e("code",[t._v("String getOutputDataTypeForContentDataType(Class<?> clazz, String dataType)")]),t._v(": gets the data type string for the input data type.")]),t._v(" "),e("li",[e("code",[t._v("Object convert(Object data, String dataType, Map<String,String> metadata)")]),t._v(": Convert the input data type to the output object, includes metadata about the log event as described in "),e("a",{attrs:{href:"#log-metadata"}},[t._v("Log Metadata")]),t._v(".")])]),t._v(" "),e("h3",{attrs:{id:"groovy-contentconverter"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#groovy-contentconverter","aria-hidden":"true"}},[t._v("#")]),t._v(" Groovy ContentConverter")]),t._v(" "),e("p",[t._v("Create a groovy script that calls the "),e("code",[t._v("rundeckPlugin")]),t._v(" method and passes the "),e("code",[t._v("ContentConverterPlugin")]),t._v(" as the type of plugin:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("com"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dtolabs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rundeck"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("plugins"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("logs")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContentConverterPlugin")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("rundeckPlugin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContentConverterPlugin")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//plugin definition")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("To define metadata about your plugin, see the "),e("router-link",{attrs:{to:"/developer/01-plugin-development.html#groovy-plugin-development"}},[t._v("Plugin Development - Groovy Plugin Development")]),t._v(" chapter.")],1),t._v(" "),e("p",[t._v("The "),e("code",[t._v("ContentConverterPlugin")]),t._v(" Groovy DSL supports defining conversions between data types.")]),t._v(" "),e("p",[t._v("Data types are represented with the "),e("code",[t._v("DataType")]),t._v(" class (internal to the groovy plugin builder),\nand can be created by calling the "),e("code",[t._v("dataType(Class,String)")]),t._v(" method with a Java Class, and a data type string.")]),t._v(" "),e("p",[t._v("The built-in "),e("code",[t._v("convert(DataType input, Datatype output, Closure closure)")]),t._v(" method allows you to define conversions from one\nData Type to another. Your closure will be called with the input data, and is expected to return the output data.\nReturning "),e("code",[t._v("null")]),t._v(" will simply skip the conversion.")]),t._v(" "),e("h4",{attrs:{id:"convert-declaration"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#convert-declaration","aria-hidden":"true"}},[t._v("#")]),t._v(" convert declaration")]),t._v(" "),e("p",[t._v("Call "),e("code",[t._v("convert")]),t._v(" using explicit data types and a closure to define the conversion:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Converts two data types\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-my-data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//properties available via delegation:")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// data: the input data")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// metadata: input metadata map")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// dataType: input DataType")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//return type must match the output Java class in the DataType:")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"hello ${data}, it seems you are ${metadata.mood?:'happy'}.\"")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("When the DataType uses a Java String as its class, you can omit calling "),e("code",[t._v("dataType")]),t._v(",\nand simply pass the dataType string:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Called to convert two data types\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-my-data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//data is a String, and we should return a String")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<b>'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' more data</b>'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("And if you are going to return "),e("code",[t._v("text/html")]),t._v(" the output declaration can be skipped:")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Called to convert two data types\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-my-data'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//return type defaults to String and datatype 'text/html'")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<b>'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("' more data</b>'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Since Rundeck will chain together up to two ContentConverters to render "),e("code",[t._v("text/html")]),t._v(" for a given\ninput data type, you can define multiple conversion, if you want to use\nan intermediate type.")]),t._v(" "),e("div",{staticClass:"language-java extra-class"},[e("pre",{pre:!0,attrs:{class:"language-java"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Convert a string into an intermediate java type\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-my-data-type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeClass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-another-type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//use an intermediate object")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeClass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Expect the intermediate type as input, and default to HTML output\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("convert")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("dataType")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SomeClass")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'application/x-another-type'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//now `data` will be a SomeClass object")]),t._v("\n\t"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("generateHtml")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"localization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#localization","aria-hidden":"true"}},[t._v("#")]),t._v(" Localization")]),t._v(" "),e("p",[t._v("For the basics of plugin localization see: "),e("router-link",{attrs:{to:"/developer/01-plugin-development.html#plugin-localization"}},[t._v("Plugin Development - Plugin Localization")]),t._v(".")],1),t._v(" "),e("h2",{attrs:{id:"example"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example","aria-hidden":"true"}},[t._v("#")]),t._v(" Example")]),t._v(" "),e("p",[t._v("Several built-in plugins are listed here:")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/rundeck/rundeck/tree/master/rundeckapp/src/groovy/com/dtolabs/rundeck/server/plugins/logs",target:"_blank",rel:"noopener noreferrer"}},[e("code",[t._v("rundeckapp/src/groovy/com/dtolabs/rundeck/server/plugins/logs")]),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v('Several of the built-in rundeck plugins convert their input into a "Data Type" of: A Java List or Map object and type name of '),e("code",[t._v("application/x-java-map-or-list")]),t._v('. This "Data Type" can be rendered to HTML via the '),e("a",{attrs:{href:"https://github.com/rundeck/rundeck/tree/master/rundeckapp/src/groovy/com/dtolabs/rundeck/server/plugins/logs/HTMLTableViewConverterPlugin.groovy",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTMLTableViewConverterPlugin"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("Your plugins can make use of this built-in plugin and therefore do not have to convert directly to HTML.\nSee the "),e("a",{attrs:{href:"https://github.com/rundeck/rundeck/blob/master/rundeckapp/src/groovy/com/dtolabs/rundeck/server/plugins/logs/JsonConverterPlugin.groovy",target:"_blank",rel:"noopener noreferrer"}},[t._v("JsonConverterPlugin"),e("OutboundLink")],1),t._v(" for an example.")]),t._v(" "),e("h2",{attrs:{id:"example-groovy-plugins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#example-groovy-plugins","aria-hidden":"true"}},[t._v("#")]),t._v(" Example Groovy plugins")]),t._v(" "),e("p",[t._v("See "),e("a",{attrs:{href:"https://github.com/rundeck/rundeck/tree/master/examples/example-groovy-content-converter-plugins",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/rundeck/rundeck/tree/master/examples/example-groovy-content-converter-plugins"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[e("router-link",{attrs:{to:"/developer/01-plugin-development.html#plugin-localization"}},[t._v("Plugin Development - Plugin Localization")])],1)])},[],!1,null,null,null);a.default=s.exports}}]);