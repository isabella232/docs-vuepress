(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{236:function(t,n,e){t.exports=e.p+"assets/img/password-utility-plugin-list.c5e1a2b0.png"},237:function(t,n,e){t.exports=e.p+"assets/img/password-utility-plugin-form.644eed24.png"},238:function(t,n,e){t.exports=e.p+"assets/img/password-utility-plugin-result.737bd26f.png"},520:function(t,n,e){"use strict";e.r(n);var r=e(0),s=Object(r.a)({},function(){var t=this,n=t.$createElement,r=t._self._c||n;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"password-encrypt-utility-plugins"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#password-encrypt-utility-plugins","aria-hidden":"true"}},[t._v("#")]),t._v(" Password Encrypt Utility Plugins")]),t._v(" "),r("h2",{attrs:{id:"about"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#about","aria-hidden":"true"}},[t._v("#")]),t._v(" About")]),t._v(" "),r("p",[t._v("Password Utility Plugin allows you defined custom password encrypter through the Password Utility GUI.\nThen, using the GUI you will be able to encrypt password or text values with a custom encrypter that you determine.")]),t._v(" "),r("h2",{attrs:{id:"use"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#use","aria-hidden":"true"}},[t._v("#")]),t._v(" Use")]),t._v(" "),r("p",[t._v("Create a Password Utility Plugin and install it as a Rundeck Plugin.\nYou will need to implement the "),r("code",[t._v("PasswordUtilityEncrypterPlugin")]),t._v(" interface.")]),t._v(" "),r("p",[t._v("Then, on the "),r("code",[t._v("System > Password Utility")]),t._v(" menu option.")]),t._v(" "),r("p",[t._v("You will see your plugin on the available encoders list")]),t._v(" "),r("figure",[r("img",{attrs:{src:e(236),alt:"Figure: Encoders List"}}),r("figcaption",[t._v("Figure: Encoders List")])]),t._v(" "),r("p",[t._v("Select your plugin and the plugin's attributes will be displayed on the form.")]),t._v(" "),r("figure",[r("img",{attrs:{src:e(237),alt:"Figure: Encoders Form"}}),r("figcaption",[t._v("Figure: Encoders Form")])]),t._v(" "),r("p",[t._v("Finally, run the encryption")]),t._v(" "),r("figure",[r("img",{attrs:{src:e(238),alt:"Figure: Encoders Result"}}),r("figcaption",[t._v("Figure: Encoders Result")])]),t._v(" "),r("h2",{attrs:{id:"java-plugin-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-plugin-type","aria-hidden":"true"}},[t._v("#")]),t._v(" Java Plugin Type")]),t._v(" "),r("div",{staticClass:"language-{.java} extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v('package com.plugin.example;\n\nimport com.dtolabs.rundeck.core.encrypter.EncryptorResponse;\nimport com.dtolabs.rundeck.core.encrypter.PasswordUtilityEncrypterPlugin;\nimport com.dtolabs.rundeck.core.plugins.Plugin;\nimport com.dtolabs.rundeck.core.plugins.configuration.*;\nimport com.dtolabs.rundeck.plugins.ServiceNameConstants;\nimport com.dtolabs.rundeck.plugins.descriptions.PluginDescription;\nimport com.dtolabs.rundeck.plugins.util.*;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Plugin(service = ServiceNameConstants.PasswordUtilityEncrypter, name ="MyPasswordEncrypterTest")\n@PluginDescription(title = "MyPasswordEncrypterTest", description = "MyPasswordEncrypterTest")\n/**\n * new MyPasswordEncrypterTest plugin, will provide the encrypt function on the rundeck GUI (Password Utility page)\n */\npublic class MyPasswordEncrypterTest implements PasswordUtilityEncrypterPlugin, Describable {\n\n    static Description DESCRIPTION = DescriptionBuilder.builder()\n            .name("MyPasswordEncrypterTest")\n            .title("MyPasswordEncrypterTest")\n            .description("MyPasswordEncrypterTest description")\n            .property(PropertyUtil.string("value", "value", "value to encrypt", true, null))\n            .build();\n\n\n    @Override\n    public Description getDescription() {\n        return DESCRIPTION;\n    }\n    \n    /**\n     * will perform the encrypt process based on the parameters set on formProperties()\n     * The {@link config} map of parametes passing form gue GUI.\n     */\n    @Override\n    public EncryptorResponse encrypt(Map config) {\n\n        EncryptorResponseImpl result = new EncryptorResponseImpl();\n\n        try {\n            //get the value set on the GUI form\n            String valToEncrypt = (String) config.get("value");\n\n            //my custom encripter (you will need to define your custom encryptor)\n            CustomEncryptor encryptor = ...\n            String encryptedValue = encryptor.encrypt(valToEncrypt);\n            result.setValid(true);\n\n            //this will be returned to the page, this map will be printed on the GUI\n            Map<String, String> outputs = new HashMap();\n            outputs.put("original", valToEncrypt);\n            outputs.put("encrypted", "encryptedValue");\n            result.setOuputs(outputs);\n\n        }catch (Exception e){\n            result.setValid(false);\n            result.setError(e.getMessage());\n        }\n\n        return result;\n    }\n\n    class EncryptorResponseImpl implements EncryptorResponse{\n        boolean isValid;\n        String error;\n        Map<String, String> ouputs;\n\n        public void setValid(boolean valid) {\n            isValid = valid;\n        }\n\n        public void setError(String error) {\n            this.error = error;\n        }\n\n        public void setOuputs(Map<String, String> ouputs) {\n            this.ouputs = ouputs;\n        }\n\n        @Override\n        public boolean isValid() {\n            return isValid;\n        }\n\n        @Override\n        public String getError() {\n            return error;\n        }\n\n        @Override\n        public Map<String, String> getOutputs() {\n            return ouputs;\n        }\n\n    }\n}\n\n')])])])])},[],!1,null,null,null);n.default=s.exports}}]);