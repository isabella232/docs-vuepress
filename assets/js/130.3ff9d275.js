(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{515:function(e,t,r){"use strict";r.r(t);var o=r(0),n=Object(o.a)({},function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"orchestrator-plugin"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#orchestrator-plugin","aria-hidden":"true"}},[e._v("#")]),e._v(" Orchestrator Plugin")]),e._v(" "),r("h2",{attrs:{id:"configuring"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#configuring","aria-hidden":"true"}},[e._v("#")]),e._v(" Configuring")]),e._v(" "),r("p",[e._v("Orchestrators are configured in a Job definition, see: "),r("router-link",{attrs:{to:"/manual/creating-jobs.html#orchestrator"}},[e._v("Jobs - Orchestrator")]),e._v(".")],1),e._v(" "),r("h2",{attrs:{id:"java-plugin-type"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#java-plugin-type","aria-hidden":"true"}},[e._v("#")]),e._v(" Java Plugin Type")]),e._v(" "),r("div",{staticClass:"tip custom-block"},[r("p",[e._v("Refer to "),r("router-link",{attrs:{to:"/developer/01-plugin-development.html#java-plugin-development"}},[e._v("Java Development")]),e._v(" for information about developing a Java plugin for Rundeck.")],1)]),e._v(" "),r("p",[e._v("The plugin interface is "),r("a",{attrs:{href:"https://static.javadoc.io/org.rundeck/rundeck-core/3.1.0-20190731/com/dtolabs/rundeck/plugins/orchestrator/OrchestratorPlugin.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("OrchestratorPlugin"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("p",[e._v("This is actually a Factory pattern, which produces an "),r("a",{attrs:{href:"https://static.javadoc.io/org.rundeck/rundeck-core/3.1.0-20190731/com/dtolabs/rundeck/plugins/orchestrator/Orchestrator.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Orchestrator"),r("OutboundLink")],1),e._v(" instance.")]),e._v(" "),r("p",[e._v("The "),r("code",[e._v("Orchestrator")]),e._v(" instance is responsible for determining what order and how many nodes are available to execute on.")]),e._v(" "),r("p",[e._v("All of the methods on the orchestrator will be called on the same thread,\nso your Orchestrator implementation does not need to worry about synchronization.")]),e._v(" "),r("p",[e._v("The "),r("code",[e._v("getNode()")]),e._v(" method will be called multiple times to retrieve any available Nodes for processing.\nIf it returns "),r("code",[e._v("null")]),e._v(", that indicates no nodes are currently available.\n"),r("code",[e._v("isComplete")]),e._v(" method will be called to determine if any nodes will be available in the future if "),r("code",[e._v("null")]),e._v(" has been returned.\nNote that "),r("code",[e._v("isComplete")]),e._v(" does not need to wait for all nodes to be returned via "),r("code",[e._v("returnNode")]),e._v(",\nit merely has to indicate if any new nodes will be returned from "),r("code",[e._v("getNode()")]),e._v(".")]),e._v(" "),r("p",[e._v("The Orchestrator should return a node from getNode when it is ready to be executed on.\nOnce the execution is completed on a node the "),r("code",[e._v("returnNode(OrchestratorNodeResult)")]),e._v(" method will be called with the node and information about the success status of the execution,\nallowing the Orchestrator to mark new nodes to be released.")]),e._v(" "),r("p",[e._v("Nodes may be executed on in the same or on multiple threads,\nthe Orchestrator processor will manage the threads based on the configured Threadcount for the job.")]),e._v(" "),r("p",[e._v("In this manner, the Orchestrator allows some number of nodes to be executed on simultaneously, and manages\nwhen new nodes are available.")]),e._v(" "),r("p",[e._v("Note: The Orchestrator must abide by these limitations:")]),e._v(" "),r("ol",[r("li",[e._v("A node may not be processed more than once, so getNode should always return a new node, or null.")]),e._v(" "),r("li",[e._v("The Orchestrator must return nodes from the original set given to the OrchestratorPlugin, it cannot introduce new nodes")])])])},[],!1,null,null,null);t.default=n.exports}}]);